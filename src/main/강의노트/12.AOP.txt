[ 절차지향 프로그래밍 ]
[ 함수형 프로그래밍 ]
[ 객체지향 프로그래밍 : OOP ] : 객체들이 서로 상호작용(2개이상)하여 프로그래밍 방식
[ 관점지향 프로그래밍 : AOP ] : 핵심 로직 과 공통적인 관심사를 분리하여 관리하는 프로그래밍 방식
    1. 목적 : 핵심 로직(서비스)은 그대로 유지하고 공통 기능은 한곳에서 관리한다. <유지보수/확장성>
    2. 공통기능
        1) 로그 처리    2) 트랜잭션(SQL시작/종료)   3) 성능(시간)평가     4) 보안(인증,권한) 등등
    3. 사용법
        1) 설치 : implementation 'org.springframework.boot:spring-boot-starter-aop'
        2) AOP 커스텀 클래스
            @Aspect         : AOP 클래스임을 명시
            @Component      : 스프링 빈 으로 등록
            class AopClass{ }
        3) AOP 커스텀 클래스내 공통함수 정의
            @Before         : 메소드 실행 전               , 권한 검사 용도
            @After          : 메소드 실행 후               , 로그 용도, 연동 close 해제 용도
            @AfterReturning : 메소드 정상 종료후 반환값      , 반환값 기록
            @Around         : 메소드 실행 전후 모두          , 성능평가 , 트랜잭션
        4) execution 규칙
            1. 리턴 타입 지정
                execution(*) :

            // java 이하경로부터 : 적용할 메소드가 위치한 패키지/파일 경로
                // -> 같은패키지 : 클래스명만작성 AopService
                // -> 다른패키지 : example.day08.AopService
            // .메소드명
                // .* : 해당 클래스내 메소드에 적용
                // .enter1 : 해당 클래스내 enter1에만 적용
            //( 매개변수 )
                // .(..) : 해당 메소드의 모든 매개변수를 갖는곳에 적용
                // .enter1(int, boolean) : 지정한 매개변수를 갖는 메소드만 적용


    4. AOP 사용하는 주요 어노테이션
        4-1) @Transactional
        4-2) @Log4j2
        4-3 ) 스프링 시큐리티